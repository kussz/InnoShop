@model InnoShop.Domain.Models.Product

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Редактирование продукта</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form id="editForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="5"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Cost" class="control-label"></label>
                <input type="number" max="2000" min="0" asp-for="Cost" class="form-control" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ProdTypeId" class="control-label"></label>
                <select asp-for="ProdTypeId" class="form-control" asp-items="ViewBag.Categories"></select>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Public" /> @Html.DisplayNameFor(model => model.Public)
                </label>
            </div>
            <input type="hidden" asp-for="Sold"/>
            <input type="hidden" asp-for="Id"/>
            <input type="hidden" asp-for="UserId" id="user" />
            <input type="hidden" asp-for="BuyerId"/>
            <input type="hidden" asp-for="CreationDate"/>
            <div id="tags-container">
                <div id="tags-list">
                </div>

                <input class="form-control" id="tag-input" type="text" placeholder="Добавить тег" onkeydown="checkTagInput(event)" />
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" id="submitBtn">Подтвердить</button>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Detail" asp-route-id="@Model.Id">Вернуться</a>
</div>

@section Scripts
{
    <script src="~/js/Authorize.js" asp-append-version="true"></script>
    <script>
                async function go() {
            const user = await auth(`@ViewBag.Host.User`);
            if (document.getElementById('user').getAttribute('value') != user.id && getRoleFromToken(localStorage.getItem('jwtToken')) != "Admin") {
                window.location.href = "Account/Forbidden";
            }
        }

        document.getElementById('submitBtn').addEventListener('click', async () => {
            const form = document.getElementById('editForm');
            const formData = new FormData(form);
            tagsSend = tags.map((tagname,index)=>({
                id:0,
                prodId:@Model.Id,
                name: tagname
            }))
            console.log(tagsSend);
            formData.append("ProdAttribs", JSON.stringify(tagsSend));
            for (const [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
            }
            const response = await fetch('@ViewBag.Host.Product/Product/Edit', {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('jwtToken'), // Добавляем заголовок
                    'Accept': 'application/json' // Другие заголовки, если нужно
                },
                body: formData // Отправляем данные формы
            });

            if (response.ok) {
                // Обработка успешного ответа
                const result = await response.json();
                console.log('Success:', result);
                // Например, перенаправление на другую страницу
                window.location.href = `/Product/Detail/${@Model.Id}`; // Замените на ваш URL
            } else {
                // Обработка ошибок
                console.error('Error:', response.statusText);
            }
        });

        go();

        let tags = [];
        var prodAttribs = @Html.Raw(Json.Serialize(Model.ProdAttribs));
        let tagsraw = prodAttribs.map(function (attrib) {
            return attrib.name;  // Возвращаем только имя
        });
        console.log(tagsraw);
        tagsraw.forEach(tag=>{
            addTag(tag);
        })
        // Проверяем ввод в текстовом поле
        function checkTagInput(event) {
            const input = document.getElementById('tag-input');
            const value = input.value.trim();

            // Если пользователь нажал Enter или запятую
            if ((event.key === 'Enter' || event.key === ',') && value) {
                addTag(value);
                input.value = ''; // Очищаем поле ввода
                event.preventDefault(); // Предотвращаем стандартное поведение Enter
            }
        }

        // Добавляем новый тег
        function addTag(tag) {
            if (!tags.includes(tag)) { // Проверка на уникальность
                tags.push(tag);
                renderTags();
            } else {
                alert('Этот тег уже добавлен!');
            }
        }

        // Удаляем тег
        function removeTag(button) {
            const tagText = button.parentElement.id
            tags = tags.filter(t => t !== tagText); // Удаляем из массива
            renderTags();
        }

        // Рендеринг тегов
        function renderTags() {
            const tagsList = document.getElementById('tags-list');
            tagsList.innerHTML = ''; // Очищаем старые теги
            tags.forEach(tag => {
                const tagElement = document.createElement('span');
                tagElement.className = 'tag';
                tagElement.id = tag
                tagElement.innerHTML = `${tag} <button type="button" class="remove-tag" onclick="removeTag(this)">×</button>`;
                tagsList.appendChild(tagElement);
            });
        }
    </script>
}